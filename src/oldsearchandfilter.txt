
import React, { useState, useEffect } from 'react';
import tableDetails from './table_details.json';

export default function SearchAndFilter({ setQueryResult }) {
    const [formData, setFormData] = useState({
        date: '2021',
        selectedTable: '',
        country: [],
        region: [],
        utla: [],
        ltla: [],
        msoa: [],
        lsoa: [],
        oa: [],
    });
    const [outputAreas, setOutputAreas] = useState([]);
    const [LargeRegions, setLargeRegions] = useState({});
    const [selectedLTLAs, setSelectedLTLAs] = useState([]);
    const [columnNames, setColumnNames] = useState([]);
    const [selectedColumns, setSelectedColumns] = useState([]);

    useEffect(() => {
        fetchCtryRgnLA();
    }, []);

    useEffect(() => {
        if (formData.selectedTable && formData.selectedTable.length > 0) {
            fetchColumnNames(formData.selectedTable).then(data => {
                if (data) {
                    setColumnNames(data);
                }
            });
        }
    }, [formData.selectedTable]);

    useEffect(() => {
        formData.ltla.forEach(ltla => {
            if (!selectedLTLAs[ltla]) { // Only fetch if ltla data is not already fetched
                fetchSOAs(ltla);
            }
        });
    }, [formData.ltla]);

    useEffect(() => {
        if (formData.lsoa.length > 0) {
            fetchOAs();
        }
    }, [formData.lsoa]);

    const handleChange = (e) => {
        const { name, value } = e.target;
        setFormData(prev => ({
            ...prev,
            [name]: value
        }));
    };

    const handleColumnSelection = (columnName) => {
        setSelectedColumns(prevColumns => {
            if (prevColumns.includes(columnName)) {
                return prevColumns.filter(col => col !== columnName);
            } else {
                return [...prevColumns, columnName];
            }
        });
    };


    const fetchCtryRgnLA = async () => {
        try {
            const response = await fetch('http://localhost:5000/LargeRegions');
            const data = await response.json();
            setLargeRegions(data);
        } catch (error) {
            console.error('Failed to load geography mapping:', error);
        }
    };

    const fetchSOAs = async (ltla) => {
        try {
            const response = await fetch(`http://localhost:5000/subregions?ltla=${ltla}`);
            if (!response.ok) {
                throw new Error('Failed to fetch geography options');
            }
            const data = await response.json();
            setSelectedLTLAs(prev => ({ ...prev, [ltla]: data })); // Update ltlas state with new data
        } catch (error) {
            console.error('Error fetching geography options for ltla:', ltla, error);
            setSelectedLTLAs(prev => ({ ...prev, [ltla]: {} })); // Set empty object on error
        }
    };

    const fetchOAs = async () => {
        try {
            const response = await fetch(`http://localhost:5000/outputAreas?lsoa=${formData.lsoa.join(',')}`);
            const data = await response.json();
            setOutputAreas(data);
        } catch (error) {
            console.error('Failed to load output areas:', error);
        }
    };

    const fetchColumnNames = async () => {
        try {
            const response = await fetch(`http://localhost:5000/columnNames?table=${formData.selectedTable}`);
            const data = await response.json();
            setColumnNames(data);
        } catch (error) {
            console.error('Failed to load column names:', error);
        }
    };

    const toggleSelection = (name, value) => {
        setFormData(prev => ({
            ...prev,
            [name]: prev[name].includes(value)
                ? prev[name].filter(item => item !== value)
                : [...prev[name], value]
        }));
    };

    const isSelected = (name, value) => {
        return formData[name].includes(value);
    };

    const handleSubmit = async (e) => {
        e.preventDefault();
        let geography = {type: 'ctry', value: formData.country.join(',')};
        if (formData.region.length > 0) geography = {type: 'rgn', value: formData.region.join(',')};
        if (formData.utla.length > 0) geography = {type: 'utla', value: formData.utla.join(',')};
        if (formData.ltla.length > 0) geography = {type: 'ltla', value: formData.ltla.join(',')};
        if (formData.msoa.length > 0) geography = {type: 'msoa', value: formData.msoa.join(',')};
        if (formData.lsoa.length > 0) geography = {type: 'lsoa', value: formData.lsoa.join(',')};
        if (formData.oa.length > 0) geography = {type: 'oa', value: formData.oa.join(',')};
    
        try {
            const response = await fetch(`http://localhost:5000/paramQuery`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    selectedTable: formData.selectedTable,
                    geography: geography,
                    columns: selectedColumns.map(column => column.replace(/ /g, '_'))
                })
            });
    
            if (!response.ok) {
                throw new Error('Network response was not ok');
            }
    
            const result = await response.json();
            setQueryResult({ data: result.data, query: result.query });
        } catch (error) {
            console.error('Failed to fetch data:', error);
        }
    };

    return (
        <div>
            <h2>Search and Filter</h2>
            <form onSubmit={handleSubmit}>
            <div className="frame">
                <h3>First, select the data you need</h3>
                    <div className="table-select">
                        <div>
                            <label>
                                <input
                                    list="table-options"
                                    name="selectedTable"
                                    value={formData.selectedTable}
                                    onChange={handleChange}
                                    placeholder="Find a Dataset"
                                />
                                <datalist id="table-options">
                                    {Object.entries(tableDetails)
                                        .sort((a, b) => a[1].name.localeCompare(b[1].name))
                                        .map(([code, details]) => (
                                            <option key={code} value={code}>
                                                {details.name}
                                            </option>
                                        ))}
                                </datalist>
                            </label>
                        </div>
                        <div>
                            <label>
                                <select
                                    className="dropdown year-select"
                                    type="number"
                                    name="date"
                                    value={formData.date}
                                    onChange={handleChange}
                                >
                                    <option value="2016">2001</option>
                                    <option value="2011">2011</option>
                                    <option value="2021">2021</option>
                                </select>
                            </label>
                        </div>
                    </div>
                    <div className="column-select">
                        {columnNames && columnNames.length > 0 && (
                            <div>
                                <label>Columns:</label>
                                {columnNames
                                    .filter(columnName => {
                                        // List of column names to exclude
                                        const excludeColumns = ['date', 'geography', 'geography code', 'id'];
                                        // Normalize both for consistent comparison
                                        return !excludeColumns.includes(columnName.trim().toLowerCase());
                                    })
                                    .map((columnName) => {
                                        // Remove the selectedTable details.name and any trailing ':' from the columnName
                                        const tableDetailsName = tableDetails[formData.selectedTable]?.name || '';
                                        const cleanColumnName = columnName.replace(new RegExp(`^${tableDetailsName}:?`, 'i'), '').trim();

                                        return (
                                            <button
                                                className={selectedColumns.includes(columnName) ? 'selected' : ''}
                                                type="button"
                                                key={columnName}
                                                onClick={() => handleColumnSelection(columnName)}
                                            >
                                                {cleanColumnName}
                                            </button>
                                        );
                                    })}
                            </div>
                        )}
                    </div>
                </div>
                <div className="frame">
                    <h3>Next, select the geography</h3>
                    <div>
                        {Object.keys(LargeRegions).length > 0 && (
                            <>
                                <label>Region:</label>
                                {Object.keys(LargeRegions).map(region => (
                                    <button
                                        type="button"
                                        key={region}
                                        className={isSelected('region', region) ? 'selected' : ''}
                                        onClick={() => toggleSelection('region', region)}
                                    >
                                        {region}
                                    </button>
                                ))}
                            </>
                        )}
                    </div>
                    <div>
                        {formData.region.length > 0 && (
                            <>
                                <label>Local Authority (Upper Tier):</label>
                                {formData.region.flatMap(region =>
                                    Object.keys(LargeRegions[region] || {}).map(utla => (
                                        <button
                                            type="button"
                                            key={utla}
                                            className={isSelected('utla', utla) ? 'selected' : ''}
                                            onClick={() => toggleSelection('utla', utla)}
                                            disabled={!formData.region.length}
                                        >
                                            {utla}
                                        </button>
                                    ))
                                )}
                            </>
                        )}
                    </div>
                    <div>
                        {formData.utla.length > 0 && (
                            <>
                                <label>Local Authority (Lower Tier):</label>
                                {formData.utla.flatMap(utla => {
                                    const region = formData.region.find(r => LargeRegions[r] && LargeRegions[r][utla]);
                                    if (!region) return null; // Safely handle cases where no region is found

                                    return (LargeRegions[region][utla] || []).map(ltla => (
                                        <button
                                            type="button"
                                            key={ltla}
                                            className={isSelected('ltla', ltla) ? 'selected' : ''}
                                            onClick={() => { toggleSelection('ltla', ltla); fetchSOAs(ltla); }}
                                            disabled={!formData.utla.length}
                                        >
                                            {ltla}
                                        </button>
                                    ));
                                })}
                            </>
                        )}
                    </div>
                    <div>
                        {formData.ltla.length > 0 && (
                            <>
                                <label>Output Area (Middle Super):</label>
                                {formData.ltla.flatMap(ltla =>
                                    Object.keys(selectedLTLAs[ltla] || {}).map(msoa => (
                                        <button
                                            type="button"
                                            key={msoa}
                                            className={isSelected('msoa', msoa) ? 'selected' : ''}
                                            onClick={() => toggleSelection('msoa', msoa)}
                                            disabled={!formData.ltla.length}
                                        >
                                            {msoa}
                                        </button>
                                    ))
                                )}
                            </>
                        )}
                    </div>
                    <div>
                        {formData.msoa.length > 0 && (
                            <>
                                <label>Output Area (Lower Super):</label>
                                {formData.msoa.flatMap(msoa =>
                                    formData.ltla.flatMap(ltla => {
                                        const msoaData = selectedLTLAs[ltla]?.[msoa];
                                        if (msoaData) {
                                            return msoaData.map(lsoa => (
                                                <button
                                                    type="button"
                                                    key={lsoa}
                                                    className={isSelected('lsoa', lsoa) ? 'selected' : ''}
                                                    onClick={() => { toggleSelection('lsoa', lsoa); fetchOAs(); }}
                                                    disabled={!formData.msoa.length}
                                                >
                                                    {lsoa}
                                                </button>
                                            ));
                                        }
                                        return null;
                                    })
                                )}
                            </>
                        )}
                    </div>
                    <div>
                        {outputAreas.length > 0 && (
                            <>
                                <label>Output Area (Postcode Level):</label>
                                {outputAreas.map(code => (
                                    <button
                                        type="button"
                                        key={code}
                                        className={isSelected('oa', code) ? 'selected' : ''}
                                        onClick={() => toggleSelection('oa', code)}
                                        disabled={!formData.lsoa.length}
                                    >
                                        {code}
                                    </button>
                                ))}
                            </>
                        )}
                    </div>
                </div>
                <button type="submit">Submit Query</button>
            </form>
        </div>
    );
}
